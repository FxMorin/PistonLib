//file:noinspection All

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/pistonlib.accesswidener")
    runs {
        datagenClient {
            client()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.strict-validation"

            ideConfigGenerated = true
            runDir "build/datagen"
            source sourceSets.main
        }
    }
}

if (!project.file("src/generated").exists()) {
    runClient.dependsOn runDatagenClient
}


sourceSets {
    main {
        resources {
            srcDir "src/generated/resources"
        }
    }
}

repositories {
    maven { url = "https://jitpack.io" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Toml
    modImplementation "com.moandjiezana.toml:toml4j:${project.toml4j_version}"
    include "com.moandjiezana.toml:toml4j:${project.toml4j_version}"

    // MixinExtras
    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixinExtras_Version}")))
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    manifest {
        attributes([
                "Specification-Title"     : "${archives_base_name}",
                "Specification-Vendor"    : "${maven_group}",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : "${archives_base_name}",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "${maven_group}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_name}.mixins.json"
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {}
}
